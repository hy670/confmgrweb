"""
Django settings for confmgrweb project.

Generated by 'django-admin startproject' using Django 2.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import IPy
import networkx
import confmgrweb.devicebase as devicebase

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'yq14)$mzgut3_s9*ieumw#bdqy5i6-eus@)l4=n+1@1kfwtrz='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'confmgrweb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

            ],
        },
    },
]

WSGI_APPLICATION = 'confmgrweb.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

PROJECT_PATH = os.path.abspath(os.path.dirname(__file__))
STATIC_ROOT = os.path.join(os.path.dirname(PROJECT_PATH), 'static')
STATICFILES_DIRS = (
    ("img", os.path.join(STATIC_ROOT, 'img')),
    ("css", os.path.join(STATIC_ROOT, 'css')),
    ("js", os.path.join(STATIC_ROOT, 'js')),
)


# 创建防火墙FGT800
fgt800 = devicebase.FGT800('fgt800')
# 解析FGT800配置文件、并生成策略表
fgt800.parseconffile()

# 创建防火墙USG800
usg800 = devicebase.USG800('usg800')
# 解析配置文件
usg800.parseconffile()
print(usg800.name)

# 创建防火墙列表
firewalllist = []
firewalllist.append(usg800)
firewalllist.append(fgt800)
c4948 = devicebase.EthSW('c4948')

# 创建网络节点并添加至网络节点列表
netaddrlist = []
lszaddr = devicebase.NetAddr('lszaddr', '192.169.3.0/24')
chenzaddr = devicebase.NetAddr('chenzaddr', '192.168.22.0/24')
internet = devicebase.NetAddr('internetaddr', '0.0.0.0/0')
testaddr = devicebase.NetAddr('testaddr', '10.16.7.0/24')
webaddr = devicebase.NetAddr('webaddr', '10.16.8.0/24')
appaddr = devicebase.NetAddr('appaddr', '10.16.16.0/24')
mgraddr = devicebase.NetAddr('mgraddr', '172.168.1.0/24')
netaddrlist.append(lszaddr)
netaddrlist.append(chenzaddr)
netaddrlist.append(testaddr)
netaddrlist.append(webaddr)
netaddrlist.append(appaddr)
netaddrlist.append(mgraddr)
netaddrlist.append(internet)

# 创建网络拓扑
topology = networkx.Graph()
topology.add_node(usg800, labels=usg800.name)
topology.add_node(fgt800, labels=fgt800.name)
topology.add_node(c4948, labels=c4948.name)
topology.add_node(internet, labels=internet.name)
topology.add_node(lszaddr, labels=lszaddr.name)
topology.add_node(testaddr, labels=testaddr.name)
topology.add_node(webaddr, labels=webaddr.name)
topology.add_node(appaddr, labels=appaddr.name)
topology.add_node(mgraddr, labels=mgraddr.name)
topology.add_edge(internet, usg800)
topology.add_edge(usg800, c4948)
topology.add_edge(usg800, mgraddr)
topology.add_edge(c4948, testaddr)
topology.add_edge(c4948, webaddr)
topology.add_edge(c4948, fgt800)
topology.add_edge(fgt800, appaddr)
topology.add_edge(fgt800, lszaddr)
topology.add_edge(fgt800, chenzaddr)
